version: 2.1

orbs:
  vault: contentful/vault@1

defaults: &defaults
  docker:
    - image: cimg/node:16.18
  resource_class: medium+
  working_directory: ~/project

fast_checkout: &fast_checkout
  attach_workspace:
    at: ~/project

commands:
  install-build-test-examples:
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Install dependencies
          command: npm ci
      - run:
          name: Build
          command: npm run build
      - run:
          name: Test
          command: npm run test
      
  publish:
    steps:
      - vault/get-secrets:
          template-preset: 'semantic-release-ecosystem'
      - run:
          name: Setup NPM
          command: |
            echo $'@contentful:registry=https://registry.npmjs.org/
            //registry.npmjs.org/:_authToken=${NPM_TOKEN}' >> ~/.npmrc
      - run: export GH_TOKEN=${GITHUB_TOKEN}
      - run: git config --global user.email "${GIT_AUTHOR_EMAIL}"
      - run: git config --global user.name "${GIT_AUTHOR_NAME}"
      - run:
          name: Publish packages
          command: npm run publish-packages

jobs:
  build:
    <<: *defaults
    steps:
      - *fast_checkout
      - checkout
      - run:
          name: Check for prettier violations
          command: |
            git fetch origin master # circleci doesn't fetch master by default
            ./.circleci/prettier-check.sh
      - run:
          name: Install dependencies
          command: |
            npm ci
            npm run bootstrap:ci
      - run:
          name: Lint
          command: npm run lint
      - run:
          name: Build
          command: npm run build
      - persist_to_workspace:
          root: ~/project
          paths:
            - apps
  test:
    <<: *defaults
    steps:
      - *fast_checkout
      - run:
          name: Test
          command: npm run test
  deploy:
    <<: *defaults
    steps:
      - *fast_checkout
      - run:
          name: Install awscli
          command: |
            sudo apt-get update
            sudo apt-get install python3-pip python3-dev
            sudo pip3 install awscli
      - run:
          name: Deploy apps to staging
          command: npm run
          # command: |
            # STATIC_S3_BASE="s3://cf-apps-static-dev/apps-test-$CIRCLE_SHA1" \
                # STATIC_JIRA_S3_BASE="s3://cf-apps-static-dev/apps-test-$CIRCLE_SHA1/jira" \
                # REACT_APP_BACKEND_BASE_URL=$BACKEND_BASE_URL_TEST \
                # REACT_APP_SLACK_CLIENT_ID=$SLACK_CLIENT_ID_TEST \
                # STAGE='test' npm run deploy:test
      - run:
          name: Invalidate Slack staging cloudfront distribution
          # command: aws cloudfront create-invalidation --distribution-id $SLACK_TEST_CLOUDFRONT_DIST_ID --paths "/*"
          command: aws -h

  test-ts-examples:
    <<: *defaults
    working_directory: ~/project/examples/typescript
    steps:
      - install-build-test-examples

  test-js-examples:
    <<: *defaults
    working_directory: ~/project/examples/javascript
    steps:
      - install-build-test-examples

  deploy-prod:
    docker:
      - image: cimg/base:stable
    resource_class: medium+
    steps:
      - vault/get-secrets:
          template-preset: 'aws-push-artifacts'
      - checkout
      - node/install
      - run:
          name: Install dependencies
          command: |
            npm ci
            npm run bootstrap:ci
      - run:
          name: Install awscli
          command: |
            sudo apt-get update
            sudo apt-get install python3-pip python3-dev
            sudo pip3 install awscli
      - run:
          name: Build
          command: |
            REACT_APP_BACKEND_BASE_URL=$APP_SLACK_BACKEND_BASE_URL_PROD \
            REACT_APP_SLACK_CLIENT_ID=$SLACK_CLIENT_ID_PROD \
            npm run build
      - publish
      - run:
          name: Deploy apps to prod
          command: |
            STATIC_S3_BASE="s3://cf-apps-static/apps" \
                STATIC_JIRA_S3_BASE="s3://cf-apps-jira" \
                REACT_APP_BACKEND_BASE_URL=$APP_SLACK_BACKEND_BASE_URL_PROD \
                REACT_APP_SLACK_CLIENT_ID=$SLACK_CLIENT_ID_PROD \
                STAGE='prd' npm run deploy
      - run:
          name: Invalidate Slack cloudfront distribution
          command: aws cloudfront create-invalidation --distribution-id $SLACK_PRD_CLOUDFRONT_DIST_ID --paths "/*"

  notify-sentry-deploy:
    docker:
      - image: cimg/base:stable
    environment:
      SENTRY_ORG: contentful
      SENTRY_PROJECT: marketplace-apps
      SENTRY_ENVIRONMENT: production
    steps:
      - checkout
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases files $SENTRY_RELEASE upload-sourcemaps path-to-sourcemaps-if-applicable
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build:
          context:
            - vault
      - test:
          context:
            - vault
          requires:
            - build
      # - publish:
          # context:
            # - vault
          # requires:
            # - build
      - deploy:
          context:
            - vault
          requires:
            - build
          filters:
            branches:
              only:
                - refactor/improve-build
